//=============================================================================
/* Subject: CMPUT391
 * Assignment: Assignment 3
 * Authors: Michael Morris, William Kwan
 * 
 * Q6 (10 marks)
 * This part of the assignment is concerned with the mapping between the graph data model of RDF into the relational model.
 * Your program must check for errors in the input RDF data. If an error is found, the program must print a message and stop.
 * None of the triples inserted prior to the error being detected should persist in the database.
 * Your program must be able to properly load a valid RDF graph in the Turtle format, such as this sample: Edmonton.txt, without any errors.
 * Simplifying assumptions: for the sake of this assignment, you are only required to handle text in English (identified by the @en tag), and
 * literals of type string, integer, float and decimal. You may, without any penalties, discard all triples with a language tag that is
 * not @en and store literals of other types as plain strings. You do not need to store the language tag either.
 * 
 * Design a relational schema to represent an RDF data graph. Write in a plain text ASCII file called q6.txt a short report with:
 * Your relational schema and the SQLite statements to create an empty database with that schema
 * A short (max 2 paragraphs) explanation of your strategy to convert the RDF data into a database according to that schema
 * An example of a short (say 10-20 triples) input RDF graph and the corresponding relational database; your example should 
 * include prefix declarations.
 */
//=============================================================================

START TRANSACTION

try {
READ NEXT TRIPLE GROUP

// Discard
IF DOES NOT HAVE @en TAG, SKIP


EACH RDF Subject AS TABLE
EACH PROPERTY OF RDF Subject AS COLUMN
sqliteType = getType(0, COLUMN);
USE TO CREATE SQLITE TABLE CREATE QUERY


EACH RDF Subject AS TABLE
EACH PROPERTY OF RDF Subject AS COLUMN
EACH VALUE OF RDF Subject PROPERTIES AS CELL (ROW BASED)
sqliteType = getType(value);
...

COMMIT TRANSACTION

} catch( INPUTEXCEPTION ) {
  DISPLAY ERROR
  ROLLBACK TRANSACTION
}


...


sqliteType getType(String value) {
  USE REGEX TO MAKE CHECKS FASTER?
  IF CONTAINS NO LETTERS, ONLY ACCEPTABLE SYMBOLS ARE ".", "-" {
    IF DOES NOT CONTAIN "." {
      ITS AN INTEGER
    } ELSE {
      ITS A DECIMAL.  BECAUSE SCREW FLOATS.
    }
    
  }
  ELSE {
    ITS A STRING
  }

}

void createTable(...) {
  BUILD STRING
  
  EACH RDF Subject AS TABLE
  EACH PROPERTY OF RDF Subject AS COLUMN
  sqliteType = getType(0, COLUMN);
  
  
 
  
  IF INPUT IS BAD {
    THROW INPUT EXCEPTION
  }
  
}
